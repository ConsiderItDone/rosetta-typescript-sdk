"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var express_1 = __importDefault(require("express"));
var http_1 = __importDefault(require("http"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var cors_1 = __importDefault(require("cors"));
var cookie_parser_1 = __importDefault(require("cookie-parser"));
var body_parser_1 = __importDefault(require("body-parser"));
var express_openapi_validator_1 = require("express-openapi-validator");
var ExpressServer = /** @class */ (function () {
    function ExpressServer(port, host, openApiYaml) {
        this.port = port;
        this.host = host;
        this.app = express_1["default"]();
        this.openApiPath = openApiYaml;
        try {
            this.schema = js_yaml_1["default"].load(fs_1["default"].readFileSync(openApiYaml, 'utf-8')); //this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
        }
        catch (e) {
            console.error('failed to start Express Server');
            process.exit(1);
        }
        this.setupMiddleware();
    }
    ExpressServer.prototype.setupMiddleware = function () {
        var _this = this;
        // this.setupAllowedMedia();
        this.app.use(cors_1["default"]());
        this.app.use(body_parser_1["default"].json({ limit: '14MB' }));
        this.app.use(express_1["default"].json());
        this.app.use(express_1["default"].text());
        this.app.use(express_1["default"].urlencoded({ extended: false }));
        this.app.use(cookie_parser_1["default"]());
        //Simple test to see that the server is up and responding
        this.app.get('/hello', function (req, res) {
            return res.send("Hello World. path: " + _this.openApiPath);
        });
        //Send the openapi document *AS GENERATED BY THE GENERATOR*
        this.app.get('/openapi', function (req, res) {
            return res.sendFile(path_1["default"].join(__dirname, '..', '..', 'api', 'openapi.yaml'));
        });
        //View the openapi document in a visual interface. Should be able to test from this page
        this.app.use('/api-doc', swagger_ui_express_1["default"].serve, swagger_ui_express_1["default"].setup(this.schema));
        this.app.get('/login-redirect', function (req, res) {
            res.status(200);
            res.json(req.query);
        });
        this.app.get('/oauth2-redirect.html', function (req, res) {
            res.status(200);
            res.json(req.query);
        });
        this.app.routeHandlers = {};
    };
    ExpressServer.prototype.configure = function (config) {
        this.app.config = config;
    };
    ExpressServer.prototype.launch = function () {
        var _this = this;
        new express_openapi_validator_1.OpenApiValidator({
            apiSpec: this.openApiPath,
            operationHandlers: path_1["default"].join(__dirname),
            validateRequests: false,
            validateResponses: false
        })
            .install(this.app)["catch"](function (e) { return console.log(e); })
            .then(function () {
            // eslint-disable-next-line no-unused-vars
            _this.app.use(function (err, req, res, next) {
                // format errors
                res.status(err.status || 500).json({
                    message: err.message || err,
                    errors: err.errors || ''
                });
            });
            http_1["default"].createServer(_this.app).listen(_this.port, _this.host);
            console.log("Listening on port " + _this.port);
        });
    };
    ExpressServer.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.server !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.server.close()];
                    case 1:
                        _a.sent();
                        console.log("Server on port " + this.port + " shut down");
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return ExpressServer;
}());
exports["default"] = ExpressServer;
